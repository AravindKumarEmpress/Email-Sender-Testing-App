//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Email_Sender_Testing_App.SendMail {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EmailerSoap", Namespace="http://tempuri.org/")]
    public partial class Emailer : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendMailWithAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMailWithAttachmentFromS3OperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMailOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Emailer() {
            this.Url = global::Email_Sender_Testing_App.Properties.Settings.Default.Email_Sender_Testing_App_SendMail_Emailer;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendMailWithAttachmentCompletedEventHandler SendMailWithAttachmentCompleted;
        
        /// <remarks/>
        public event SendMailWithAttachmentFromS3CompletedEventHandler SendMailWithAttachmentFromS3Completed;
        
        /// <remarks/>
        public event SendMailCompletedEventHandler SendMailCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMailWithAttachment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMailWithAttachment(string To, string From, string Subject, string Body, string filename) {
            object[] results = this.Invoke("SendMailWithAttachment", new object[] {
                        To,
                        From,
                        Subject,
                        Body,
                        filename});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailWithAttachmentAsync(string To, string From, string Subject, string Body, string filename) {
            this.SendMailWithAttachmentAsync(To, From, Subject, Body, filename, null);
        }
        
        /// <remarks/>
        public void SendMailWithAttachmentAsync(string To, string From, string Subject, string Body, string filename, object userState) {
            if ((this.SendMailWithAttachmentOperationCompleted == null)) {
                this.SendMailWithAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailWithAttachmentOperationCompleted);
            }
            this.InvokeAsync("SendMailWithAttachment", new object[] {
                        To,
                        From,
                        Subject,
                        Body,
                        filename}, this.SendMailWithAttachmentOperationCompleted, userState);
        }
        
        private void OnSendMailWithAttachmentOperationCompleted(object arg) {
            if ((this.SendMailWithAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailWithAttachmentCompleted(this, new SendMailWithAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMailWithAttachmentFromS3", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMailWithAttachmentFromS3(string To, string From, string Subject, string Body, string filename) {
            object[] results = this.Invoke("SendMailWithAttachmentFromS3", new object[] {
                        To,
                        From,
                        Subject,
                        Body,
                        filename});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailWithAttachmentFromS3Async(string To, string From, string Subject, string Body, string filename) {
            this.SendMailWithAttachmentFromS3Async(To, From, Subject, Body, filename, null);
        }
        
        /// <remarks/>
        public void SendMailWithAttachmentFromS3Async(string To, string From, string Subject, string Body, string filename, object userState) {
            if ((this.SendMailWithAttachmentFromS3OperationCompleted == null)) {
                this.SendMailWithAttachmentFromS3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailWithAttachmentFromS3OperationCompleted);
            }
            this.InvokeAsync("SendMailWithAttachmentFromS3", new object[] {
                        To,
                        From,
                        Subject,
                        Body,
                        filename}, this.SendMailWithAttachmentFromS3OperationCompleted, userState);
        }
        
        private void OnSendMailWithAttachmentFromS3OperationCompleted(object arg) {
            if ((this.SendMailWithAttachmentFromS3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailWithAttachmentFromS3Completed(this, new SendMailWithAttachmentFromS3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail(string To, string From, string Subject, string Body) {
            object[] results = this.Invoke("SendMail", new object[] {
                        To,
                        From,
                        Subject,
                        Body});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailAsync(string To, string From, string Subject, string Body) {
            this.SendMailAsync(To, From, Subject, Body, null);
        }
        
        /// <remarks/>
        public void SendMailAsync(string To, string From, string Subject, string Body, object userState) {
            if ((this.SendMailOperationCompleted == null)) {
                this.SendMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailOperationCompleted);
            }
            this.InvokeAsync("SendMail", new object[] {
                        To,
                        From,
                        Subject,
                        Body}, this.SendMailOperationCompleted, userState);
        }
        
        private void OnSendMailOperationCompleted(object arg) {
            if ((this.SendMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailCompleted(this, new SendMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void SendMailWithAttachmentCompletedEventHandler(object sender, SendMailWithAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailWithAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailWithAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void SendMailWithAttachmentFromS3CompletedEventHandler(object sender, SendMailWithAttachmentFromS3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailWithAttachmentFromS3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailWithAttachmentFromS3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    public delegate void SendMailCompletedEventHandler(object sender, SendMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.3190.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591